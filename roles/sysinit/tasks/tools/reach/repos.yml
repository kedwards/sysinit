---
- name: Ensure DevOps repo exists (clone if missing)
  when: sysinit_var | default('') != 'molecule_converge'
  tags:
    - reach
    - reach-repos
    - repositories
    - git
  block:
    - name: Check if DevOps repo is present
      ansible.builtin.stat:
        path: "{{ sysinit_reach_base_dir }}/.git"
      register: devops_repo_gitdir
      become: false

    - name: Clone DevOps repository
      ansible.builtin.git:
        repo: "{{ sysinit_reach_devops_repo_url }}"
        dest: "{{ sysinit_reach_base_dir }}"
        version: "{{ sysinit_reach_devops_repo_branch }}"
        update: false
        accept_hostkey: true
        key_file: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
      register: devops_clone_result
      become: false
      environment:
        SSH_AUTH_SOCK: "{{ ssh_auth_sock | default(ansible_env.SSH_AUTH_SOCK) }}"
        SSH_AGENT_PID: "{{ ssh_agent_pid | default(ansible_env.SSH_AGENT_PID) }}"
      when: not devops_repo_gitdir.stat.exists

- name: Check for new repositories to clone
  ansible.builtin.shell: |
    cd {{ sysinit_reach_dev_dir }}
    REPOS=$(cat repos.txt)
    NEW_REPOS_FOUND=false

    for R in $REPOS; do
      if [ ! -d {{ sysinit_reach_repos_dir }}/$R ]; then
        echo "New repository found: $R"
        NEW_REPOS_FOUND=true
      fi
    done

    if [ "$NEW_REPOS_FOUND" = "true" ]; then
      echo "NEW_REPOS_TO_CLONE"
    else
      echo "ALL_REPOS_EXIST"
    fi
  register: repo_check
  become: false
  changed_when: false
  when: sysinit_var | default('') != 'molecule_converge'

- name: Retrieve required repositories
  ansible.builtin.command: "{{ sysinit_reach_repo_script }} dev"
  args:
    chdir: "{{ sysinit_reach_base_dir }}"
  register: repos_output
  changed_when: "'NEW_REPOS_TO_CLONE' in repo_check.stdout"
  become: false
  environment:
    SSH_AUTH_SOCK: "{{ ssh_auth_sock | default(ansible_env.SSH_AUTH_SOCK) }}"
    SSH_AGENT_PID: "{{ ssh_agent_pid | default(ansible_env.SSH_AGENT_PID) }}"
  when: sysinit_var | default('') != 'molecule_converge'

- name: Check if pre-commit hook already present
  ansible.builtin.stat:
    path: "{{ sysinit_reach_v2_dir }}/.git/hooks/pre-commit"
  register: hook
  when: sysinit_var | default('') != 'molecule_converge'

# - name: Install pre-commit via pip3
#   ansible.builtin.pip:
#     name: pre-commit
#     state: latest
#     executable: pip3
#   when: not hook.stat.exists

- name: Copy .env example
  ansible.builtin.copy:
    src: "{{ sysinit_reach_env_example }}"
    dest: "{{ sysinit_reach_env_file }}"
    remote_src: true
    mode: '0644'
    owner: "{{ lookup('env', 'USER') }}"
  when:
    - sysinit_reach_env_file is not file
    - sysinit_var | default('') != 'molecule_converge'

- name: Copy local config file
  ansible.builtin.copy:
    src: "{{ sysinit_reach_config_local_sample }}"
    dest: "{{ sysinit_reach_config_local }}"
    remote_src: true
    mode: '0644'
    owner: "{{ lookup('env', 'USER') }}"
  when:
    - sysinit_reach_config_local is not file
    - sysinit_var | default('') != 'molecule_converge'

- name: Create VSCode directories
  ansible.builtin.file:
    path: "{{ sysinit_reach_vscode_user_dir }}"
    state: directory
    mode: '0755'
    owner: "{{ lookup('env', 'USER') }}"
  when: sysinit_var | default('') != 'molecule_converge'

- name: Copy default VSCode settings
  ansible.builtin.copy:
    src: "{{ sysinit_reach_vscode_settings_example }}"
    dest: "{{ sysinit_reach_vscode_settings }}"
    remote_src: true
    mode: '0755'
    owner: "{{ lookup('env', 'USER') }}"
  when:
    - sysinit_reach_vscode_settings is not file
    - sysinit_var | default('') != 'molecule_converge'
