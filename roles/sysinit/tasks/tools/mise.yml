---
- name: Mise - Set mise directory path
  ansible.builtin.set_fact:
    mise_dir: "{{ sysinit_local_bin }}"

- name: Mise - Set mise binary path
  ansible.builtin.set_fact:
    mise_bin: "{{ mise_dir }}/mise"

- name: Mise - Check if mise exists
  ansible.builtin.stat:
    path: "{{ mise_bin }}"
  register: mise_exists_result

- name: Mise - Install
  when: not mise_exists_result.stat.exists or upgrade | default(false)
  block:
    - name: Mise - Create local bin directory
      ansible.builtin.file:
        path: "{{ mise_dir }}"
        state: directory
        mode: "0755"
        owner: "{{ sysinit_user }}"
        group: "{{ sysinit_user }}"

    - name: Mise - Import gpg key
      ansible.builtin.shell: >
        gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 0x7413A06D
      args:
        creates: "{{ sysinit_user_home }}/.gnupg/pubring.kbx"
      environment:
        GNUPGHOME: "{{ sysinit_user_home }}/.gnupg"

    - name: Mise - Download signed install script
      ansible.builtin.get_url:
        url: https://mise.jdx.dev/install.sh.sig
        dest: "/tmp/mise-install.sh.sig"
        mode: "0644"

    - name: Mise - Verify and extract install script
      ansible.builtin.shell: >
        gpg --decrypt /tmp/mise-install.sh.sig > /tmp/mise-install.sh
      args:
        executable: /bin/bash
        creates: "/tmp/mise-install.sh"

    - name: Mise - Make install script executable
      ansible.builtin.file:
        path: "/tmp/mise-install.sh"
        mode: "0755"

    - name: Mise - Run install script with correct binary path
      ansible.builtin.shell: >
        export MISE_INSTALL_PATH="{{ mise_bin }}" &&
        bash /tmp/mise-install.sh
      environment:
        HOME: "{{ sysinit_user_home }}"
        USER: "{{ sysinit_user }}"
      args:
        creates: "{{ mise_bin }}"

    - name: Mise - Clean up temporary files
      ansible.builtin.file:
        path: "{{ cleanup_item }}"
        state: absent
      loop_control:
        loop_var: cleanup_item
      loop:
        - "/tmp/mise-install.sh.sig"
        - "/tmp/mise-install.sh"

- name: Mise - Check if mise exists after installation
  ansible.builtin.stat:
    path: "{{ mise_bin }}"
  register: mise_exists_result

- name: Check if mise bin is installed and found.
  ansible.builtin.fail:
    msg: Mise binary cannot be found and is required.
  when: not mise_exists_result.stat.exists

- name: Mise - Configure plugins and tools
  when: mise_exists_result.stat.exists
  block:
    - name: Mise - Install custom plugins
      ansible.builtin.shell: >
        {{ mise_bin }} plugin add {{ custom_plugin_item.plugin }} {{ custom_plugin_item.src }}
      args:
        creates: "{{ sysinit_user_home }}/.local/share/mise/plugins/{{ custom_plugin_item.plugin }}"
      environment:
        HOME: "{{ sysinit_user_home }}"
        USER: "{{ sysinit_user }}"
      loop_control:
        loop_var: custom_plugin_item
      loop: "{{ sysinit_mise_custom_plugins }}"
      when: sysinit_mise_custom_plugins is defined and sysinit_mise_custom_plugins | length > 0

    - name: Mise - Get current global config
      ansible.builtin.shell: >
        {{ mise_bin }} current 2>/dev/null || echo "No tools configured"
      environment:
        HOME: "{{ sysinit_user_home }}"
        USER: "{{ sysinit_user }}"
      register: mise_current_tools
      changed_when: false
      failed_when: false

    - name: Mise - Check which tools need installation
      ansible.builtin.set_fact:
        tools_to_install: >
          {%- set missing_tools = [] -%}
          {%- for tool in sysinit_mise_plugins -%}
            {%- set tool_base = tool.split('@')[0] -%}
            {%- if tool_base not in mise_current_tools.stdout -%}
              {%- set _ = missing_tools.append(tool) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ missing_tools }}

    - name: Mise - Display tools to install
      ansible.builtin.debug:
        msg: "Tools to install: {{ tools_to_install | join(', ') if tools_to_install | length > 0 else 'None (all tools already configured)' }}"

    - name: Mise - Install all missing plugins globally at once
      ansible.builtin.shell: >
        {{ mise_bin }} use --global --yes {{ tools_to_install | join(' ') }}
      environment:
        HOME: "{{ sysinit_user_home }}"
        USER: "{{ sysinit_user }}"
      register: plugin_install_result
      when: tools_to_install | length > 0
      changed_when: plugin_install_result.rc == 0
      failed_when: plugin_install_result.rc != 0 and 'rate limit' not in plugin_install_result.stderr
