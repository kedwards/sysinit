---
- name: Mise - Set mise directory path
  ansible.builtin.set_fact:
    mise_dir: "/home/{{ lookup('env', 'USER') }}/.local/bin"

- name: Mise - Set mise binary path
  ansible.builtin.set_fact:
    mise_bin: "{{ mise_dir }}/mise"

- name: Mise - Check if mise exists
  ansible.builtin.stat:
    path: "{{ mise_bin }}"
  register: mise_exists_result

- name: Mise - Install
  become: true
  become_user: "{{ lookup('env', 'USER') }}"
  when: not mise_exists_result.stat.exists or upgrade | default(false)
  block:
    - name: Mise - Create local bin directory
      ansible.builtin.file:
        path: "{{ mise_dir }}"
        state: directory
        mode: "0755"

    - name: Mise - Import gpg key
      ansible.builtin.shell: >
        gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 0x7413A06D
      args:
        creates: "/home/{{ lookup('env', 'USER') }}/.gnupg/pubring.kbx"

    - name: Mise - Download signed install script
      ansible.builtin.get_url:
        url: https://mise.jdx.dev/install.sh.sig
        dest: "/tmp/mise-install.sh.sig"
        mode: "0644"

    - name: Mise - Verify and extract install script
      ansible.builtin.shell: >
        gpg --decrypt /tmp/mise-install.sh.sig > /tmp/mise-install.sh
      args:
        executable: /bin/bash
        creates: "/tmp/mise-install.sh"

    - name: Mise - Make install script executable
      ansible.builtin.file:
        path: "/tmp/mise-install.sh"
        mode: "0755"

    - name: Mise - Run install script with correct binary path
      ansible.builtin.shell: >
        export MISE_INSTALL_PATH="{{ mise_bin }}" &&
        bash /tmp/mise-install.sh
      args:
        creates: "{{ mise_bin }}"

    - name: Mise - Clean up temporary files
      ansible.builtin.file:
        path: "{{ cleanup_item }}"
        state: absent
      loop_control:
        loop_var: cleanup_item
      loop:
        - "/tmp/mise-install.sh.sig"
        - "/tmp/mise-install.sh"


- name: Mise - Check if mise exists after installation
  ansible.builtin.stat:
    path: "{{ mise_bin }}"
  register: mise_final_exists

- name: Mise - Install/Upgrade
  block:
    - name: Mise - Install Plugins
      ansible.builtin.shell: >
        {{ mise_bin }} plugin add {{ plugin_item.plugin }} {{ plugin_item.src }}
      loop_control:
        loop_var: plugin_item
      loop: "{{ sysinit_mise_custom_plugins }}"

    - name: Mise - Install Plugins
      ansible.builtin.shell: >
        if [ ! -d "$HOME/.local/share/mise/plugins/{{ plugin_item }}" ]; then
          {{ mise_bin }} use -g -y {{ plugin_item }}
        fi
      loop_control:
        loop_var: plugin_item
      loop: "{{ sysinit_mise_plugins }}"
  become_user: "{{ lookup('env','USER') }}"
  when: mise_bin

#- name: Mise - Install plugins
#  become: true
#  become_user: "{{ lookup('env', 'USER') }}"
#  when: mise_final_exists.stat.exists
#  block:
#    - name: Mise - Install custom plugins
#      ansible.builtin.shell: >
#        {{ mise_bin }} plugin add {{ custom_plugin_item.plugin }} {{ custom_plugin_item.src }}
#      args:
#        creates: "$HOME/.local/share/mise/plugins/{{ custom_plugin_item.plugin }}"
#      loop_control:
#        loop_var: custom_plugin_item
#      loop: "{{ sysinit_mise_custom_plugins }}"
#      when: sysinit_mise_custom_plugins is defined and sysinit_mise_custom_plugins | length > 0
#
#    - name: Mise - Install default plugins
#      ansible.builtin.shell:
#        cmd: |
#          set -o pipefail
#          # Extract the base plugin name for version-specific plugins
#          PLUGIN_BASE=$(echo '{{ plugin_item }}' | cut -d'@' -f1)
#          # Try multiple detection methods
#          if {{ mise_bin }} which $PLUGIN_BASE >/dev/null 2>&1 || \
#            {{ mise_bin }} current $PLUGIN_BASE >/dev/null 2>&1 || \
#            ([ -f "$HOME/.config/mise/config.toml" ] && grep -q "$PLUGIN_BASE" "$HOME/.config/mise/config.toml") || \
#            {{ mise_bin }} ls --installed | grep -q "^$PLUGIN_BASE"; then
#            echo "already_present"
#          else
#            {{ mise_bin }} use -g -y {{ plugin_item }}
#            echo "installed"
#          fi
#        executable: /bin/bash
#      register: plugin_install_result
#      changed_when: "'installed' in plugin_install_result.stdout"
#      failed_when: plugin_install_result.rc != 0
#      loop_control:
#        loop_var: plugin_item
#      loop: "{{ sysinit_mise_plugins }}"
#      when: sysinit_mise_plugins is defined and sysinit_mise_plugins | length > 0
