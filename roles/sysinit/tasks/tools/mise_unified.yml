---
# Unified Mise installation that works in both real deployment and Molecule testing

- name: Mise - Detect execution environment
  ansible.builtin.set_fact:
    is_molecule_env: "{{ ansible_user_id == 'root' and ansible_env.HOME == '/root' }}"
    is_container_env: "{{ ansible_virtualization_type | default('') in ['docker', 'container'] }}"

- name: Mise - Set environment-specific variables
  ansible.builtin.set_fact:
    mise_target_user: >-
      {%- if is_molecule_env -%}
        root
      {%- else -%}
        {{ sysinit_user | default(ansible_user_id) }}
      {%- endif -%}
    mise_target_home: >-
      {%- if is_molecule_env -%}
        /root
      {%- else -%}
        {{ sysinit_user_home | default(ansible_env.HOME | default('/home/' + ansible_user_id)) }}
      {%- endif -%}

- name: Mise - Set derived paths
  ansible.builtin.set_fact:
    mise_dir: "{{ mise_target_home }}/.local/bin"
    mise_bin: "{{ mise_target_home }}/.local/bin/mise"
    mise_gnupg_dir: "{{ mise_target_home }}/.gnupg"
    mise_share_dir: "{{ mise_target_home }}/.local/share/mise"

- name: Mise - Debug environment detection
  ansible.builtin.debug:
    msg:
      - "Environment detection:"
      - "  is_molecule_env: {{ is_molecule_env }}"
      - "  is_container_env: {{ is_container_env }}"
      - "  mise_target_user: {{ mise_target_user }}"
      - "  mise_target_home: {{ mise_target_home }}"
      - "  mise_bin: {{ mise_bin }}"
  when: sysinit_debug | default(false)

- name: Mise - Check if mise exists
  ansible.builtin.stat:
    path: "{{ mise_bin }}"
  register: mise_exists_result

- name: Mise - Install
  when: not mise_exists_result.stat.exists or upgrade | default(false)
  block:
    - name: Mise - Create local bin directory
      ansible.builtin.file:
        path: "{{ mise_dir }}"
        state: directory
        mode: "0755"
        owner: "{{ mise_target_user }}"
        group: "{{ mise_target_user }}"
      # In molecule/container environments, we're already root, so no become needed
      # In real deployment, we need to become the target user
      become: true
      become_user: "{{ mise_target_user }}"

    - name: Mise - Create .gnupg directory
      ansible.builtin.file:
        path: "{{ mise_gnupg_dir }}"
        state: directory
        mode: "0700"
        owner: "{{ mise_target_user }}"
        group: "{{ mise_target_user }}"
      become: true
      become_user: "{{ mise_target_user }}"

    - name: Mise - Import gpg key
      ansible.builtin.shell: >
        gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 0x7413A06D
      args:
        creates: "{{ mise_gnupg_dir }}/pubring.kbx"
      environment:
        GNUPGHOME: "{{ mise_gnupg_dir }}"
        HOME: "{{ mise_target_home }}"
      become: true
      become_user: "{{ mise_target_user }}"
      # GPG operations might fail in containers, so we'll ignore failures in molecule
      ignore_errors: "{{ is_molecule_env or is_container_env }}"

    - name: Mise - Download signed install script
      ansible.builtin.get_url:
        url: https://mise.jdx.dev/install.sh.sig
        dest: "/tmp/mise-install.sh.sig"
        mode: "0644"

    - name: Mise - Verify and extract install script (with GPG)
      ansible.builtin.shell: >
        gpg --decrypt /tmp/mise-install.sh.sig > /tmp/mise-install.sh
      args:
        executable: /bin/bash
        creates: "/tmp/mise-install.sh"
      environment:
        GNUPGHOME: "{{ mise_gnupg_dir }}"
        HOME: "{{ mise_target_home }}"
      become: "{{ not is_molecule_env }}"
      become_user: "{{ mise_target_user if not is_molecule_env else omit }}"
      # If GPG verification fails (common in containers), fall back to direct download
      ignore_errors: true
      register: gpg_decrypt_result

    - name: Mise - Download install script directly (fallback)
      ansible.builtin.get_url:
        url: https://mise.jdx.dev/install.sh
        dest: "/tmp/mise-install.sh"
        mode: "0755"
      when: gpg_decrypt_result is failed or is_molecule_env or is_container_env

    - name: Mise - Make install script executable
      ansible.builtin.file:
        path: "/tmp/mise-install.sh"
        mode: "0755"

    - name: Mise - Run install script with correct binary path
      ansible.builtin.shell: >
        export MISE_INSTALL_PATH="{{ mise_bin }}" &&
        bash /tmp/mise-install.sh
      environment:
        HOME: "{{ mise_target_home }}"
        USER: "{{ mise_target_user }}"
      args:
        creates: "{{ mise_bin }}"
      become: "{{ not is_molecule_env }}"
      become_user: "{{ mise_target_user if not is_molecule_env else omit }}"

    - name: Mise - Clean up temporary files
      ansible.builtin.file:
        path: "{{ cleanup_item }}"
        state: absent
      loop_control:
        loop_var: cleanup_item
      loop:
        - "/tmp/mise-install.sh.sig"
        - "/tmp/mise-install.sh"

- name: Mise - Check if mise exists after installation
  ansible.builtin.stat:
    path: "{{ mise_bin }}"
  register: mise_exists_result

- name: Check if mise bin is installed and found.
  ansible.builtin.fail:
    msg: "Mise binary cannot be found at {{ mise_bin }} and is required."
  when: not mise_exists_result.stat.exists

- name: Mise - Configure plugins and tools
  when: mise_exists_result.stat.exists
  block:
    - name: Mise - Check existing custom plugins
      ansible.builtin.shell: >
        {{ mise_bin }} plugins list | grep -q "^{{ custom_plugin_item.plugin }}$" && echo "exists" || echo "missing"
      environment:
        HOME: "{{ mise_target_home }}"
        USER: "{{ mise_target_user }}"
      register: custom_plugin_check
      loop_control:
        loop_var: custom_plugin_item
      loop: "{{ sysinit_mise_custom_plugins | default([]) }}"
      when: sysinit_mise_custom_plugins is defined and sysinit_mise_custom_plugins | length > 0
      changed_when: false
      failed_when: false
      become: "{{ not is_molecule_env }}"
      become_user: "{{ mise_target_user if not is_molecule_env else omit }}"
      check_mode: false

    - name: Mise - Install custom plugins
      ansible.builtin.shell: >
        {{ mise_bin }} plugin add {{ custom_plugin_item.plugin }} {{ custom_plugin_item.src }}
      environment:
        HOME: "{{ mise_target_home }}"
        USER: "{{ mise_target_user }}"
      loop_control:
        loop_var: custom_plugin_item
        index_var: plugin_index
      loop: "{{ sysinit_mise_custom_plugins | default([]) }}"
      when: >
        sysinit_mise_custom_plugins is defined and sysinit_mise_custom_plugins | length > 0
        and custom_plugin_check.results[plugin_index].stdout == "missing"
      become: "{{ not is_molecule_env }}"
      become_user: "{{ mise_target_user if not is_molecule_env else omit }}"

    - name: Mise - Get current global config
      ansible.builtin.shell: >
        {{ mise_bin }} current 2>/dev/null | awk '{print $1}' | sort || echo "No tools configured"
      environment:
        HOME: "{{ mise_target_home }}"
        USER: "{{ mise_target_user }}"
      register: mise_current_tools
      changed_when: false
      failed_when: false
      become: "{{ not is_molecule_env }}"
      become_user: "{{ mise_target_user if not is_molecule_env else omit }}"
      check_mode: false

    - name: Mise - Check which tools need installation
      ansible.builtin.set_fact:
        tools_to_install: >
          {%- set missing_tools = [] -%}
          {%- set current_tools_raw = mise_current_tools.stdout.strip() -%}
          {%- if current_tools_raw and current_tools_raw != "No tools configured" -%}
            {%- set current_tools = current_tools_raw.split('\n') | map('trim') | list -%}
          {%- else -%}
            {%- set current_tools = [] -%}
          {%- endif -%}
          {%- for tool in sysinit_mise_plugins | default([]) -%}
            {%- set tool_base = tool.split('@')[0] -%}
            {%- if tool_base not in current_tools -%}
              {%- set _ = missing_tools.append(tool) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ missing_tools }}

    - name: Mise - Display tools to install
      ansible.builtin.debug:
        msg: "Tools to install: {{ tools_to_install | join(', ') if tools_to_install | length > 0 else 'None (all tools already configured)' }}"

    - name: Mise - Install all missing plugins globally at once
      ansible.builtin.shell: >
        {{ mise_bin }} use --global --yes {{ tools_to_install | join(' ') }}
      environment:
        HOME: "{{ mise_target_home }}"
        USER: "{{ mise_target_user }}"
      register: plugin_install_result
      when: tools_to_install | length > 0
      changed_when: plugin_install_result.rc == 0
      failed_when: plugin_install_result.rc != 0 and 'rate limit' not in plugin_install_result.stderr | default('')
      become: "{{ not is_molecule_env }}"
      become_user: "{{ mise_target_user if not is_molecule_env else omit }}"
      # In molecule/container environments, some tools might fail to install
      # We'll allow failures but still report them
      ignore_errors: "{{ is_molecule_env or is_container_env }}"