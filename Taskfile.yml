version: '3'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all

  # Build tasks
  build:
    desc: Build the project
    cmds:
      - echo "✅ Project is ready - no build step required for Ansible project"

  clean:
    desc: Remove build artifacts and temporary files
    cmds:
      - rm -rf dist build .pytest_cache
      - find . -name "*.pyc" -type f -delete
      - find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
      - find . -name "*.tmp" -type f -delete
      - find . -name ".coverage" -type f -delete
      - echo "✅ Cleanup completed"

  lint:
    desc: Run all linters
    cmds:
      - pre-commit run --all-files

  lint-ansible:
    desc: Lint the Ansible code
    cmds:
      - bash -c 'source .venv/bin/activate && ansible-lint playbook.yml roles/'

  lint-shell:
    desc: Lint shell code
    cmds:
      - find . -name "*.sh" -type f -not -path "./.venv/*" | xargs shellcheck -e SC1091

  # Testing tasks
  syntax-check:
    desc: Run syntax check
    cmds:
      - bash -c 'source .venv/bin/activate && ansible-playbook --syntax-check playbook.yml'

  molecule-test:
    desc: Run Molecule tests for default scenario, no destroy
    cmds:
      - bash -c 'source .venv/bin/activate && cd roles/sysinit && molecule test'

  molecule-converge:
    desc: Run Molecule converge for development
    cmds:
      - bash -c 'source .venv/bin/activate && cd roles/sysinit && molecule converge'

  molecule-verify:
    desc: Run Molecule verify only
    cmds:
      - bash -c 'source .venv/bin/activate && cd roles/sysinit && molecule verify'

  molecule-destroy:
    desc: Destroy Molecule test instances
    cmds:
      - bash -c 'source .venv/bin/activate && cd roles/sysinit && molecule destroy'

  # Secrets
  scan-secrets:
    desc: Scan for secrets
    cmds:
      - detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins

  update-secrets:
    desc: Update secrets baseline
    cmds:
      - git ls-files -z | xargs -0 detect-secrets-hook --baseline .secrets.baseline

  audit-secrets:
    desc: Audit secrets baseline
    cmds:
      - detect-secrets audit .secrets.baseline

  # Utility tasks
  install-deps:
    desc: Install dependencies
    cmds:
      - uv venv --clear
      - uv pip install -e . --group dev
      - bash -c 'source .venv/bin/activate && ansible-galaxy install -r requirements.yml'
      - echo -e "Please also install shellcheck using your system package manager:\n
          Arch Linux -> pacman -S shellcheck\n
          Debian -> apt install shellcheck\n
          Fedora -> dnf install ShellCheck\n
          EPEL -> yum -y install epel-release; yum install ShellCheck"

  install-hooks:
    desc: Install pre-commit hooks
    cmds:
      - pre-commit install
      - echo "✅ Pre-commit hooks installed"

  # Additional development tasks
  check:
    desc: Run comprehensive checks (lint + syntax + secrets)
    cmds:
      - task: lint
      - task: syntax-check
      - task: scan-secrets
      - echo "✅ All checks passed"

  format:
    desc: Format YAML files with prettier
    cmds:
      - |+
        if command -v prettier >/dev/null 2>&1; then
          find . -name "*.yml" -o -name "*.yaml" | grep -v node_modules | xargs prettier --write
          echo "✅ YAML files formatted"
        else
          echo "⚠️  prettier not found, install with: npm install -g prettier"
        fi

  upgrade-deps:
    desc: Upgrade Python dependencies
    cmds:
      - uv pip install --upgrade pip
      - uv pip install --upgrade -e . --group dev
      - ansible-galaxy install --force -r requirements.yml
      - echo "✅ Dependencies upgraded"
